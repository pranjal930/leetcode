/*Given a singly linked list L: L0?L1?…?Ln-1?Ln,
reorder it to: L0?Ln?L1?Ln-1?L2?Ln-2?…*/
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public void reorderList(ListNode head) {
        if(head==null)
            return ;
     ListNode slow=head,fast=head;
     ListNode prev=head,curr=head,newcurr;
     ListNode start,startnext,end,endnext;
     while(fast!=null&&fast.next!=null)
     {
         fast=fast.next.next;
         slow=slow.next;
     }//takes slow to the middle
        if(slow.next==null)
            return;//for one or two elements in the list
     if(slow!=null&&slow.next!=null)
     {
         prev=slow;
         curr=slow.next;
         slow.next=null;
     }
     while(curr!=null)
     {
         newcurr=curr.next;
         curr.next=prev;
         prev=curr;
         curr=newcurr;
     }//reverse the second half of the linked list
     start=head;
     end=prev;
     while(start!=slow&&end!=slow)
     {
         startnext=start.next;
         endnext=end.next;
         start.next=end;
         end.next=startnext;
         start=startnext;
         end=endnext;
     }//attach start to end
     return ;
     
    }
}