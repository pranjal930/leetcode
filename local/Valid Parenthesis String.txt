/*Given a string containing only three types of characters: '(', ')' and '*', write a function to check whether this string is valid. We define the validity of a string by these rules:

Any left parenthesis '(' must have a corresponding right parenthesis ')'.
Any right parenthesis ')' must have a corresponding left parenthesis '('.
Left parenthesis '(' must go before the corresponding right parenthesis ')'.
'*' could be treated as a single right parenthesis ')' or a single left parenthesis '(' or an empty string.
An empty string is also valid.*/
class Solution {
    public boolean checkValidString(String s) {
     Stack<Integer> open = new Stack<>();
       Stack<Integer> ast  = new Stack<>();
       for(int i=0;i<s.length();i++)
       {
           if(s.charAt(i) == '(') open.push(i);
           else if(s.charAt(i) == '*') ast.push(i);
           else{
               if(!open.empty()) open.pop();
               else if(!ast.empty()) ast.pop();
               else return false;
           }
       }
      while(!open.empty() && !ast.empty())
      {
          if(open.peek() > ast.peek()) return false;
          open.pop();
          ast.pop();
      }
        return open.empty();
    }
}