/*In a given grid, each cell can have one of three values:

the value 0 representing an empty cell;
the value 1 representing a fresh orange;
the value 2 representing a rotten orange.
Every minute, any fresh orange that is adjacent (4-directionally) to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange.  If this is impossible, return -1 instead.*/
class Solution {
    public int orangesRotting(int[][] grid) {
        if(grid.length==0)
            return -1;
        int i,j,max=0;
        for(i=0;i<grid.length;i++)
        {
            for(j=0;j<grid[0].length;j++)
            {
                if(grid[i][j]==2)
                {
                    makeRotten(grid,i,j,2);
                }
            }
        }
        for(i=0;i<grid.length;i++)
        {
            for(j=0;j<grid[0].length;j++)
            {
                if(grid[i][j]==1)
                {
                    return -1;
                }
                else if(grid[i][j]>max)
                    max=grid[i][j];

            }
        }
        if(max==0)
            return max;
        return max-2;
    }
    public void makeRotten(int[][] grid,int r,int c,int val)
    {
        if(r==grid.length||c==grid[0].length||r<0||c<0)
            return ;
        if(r+1!=grid.length&&grid[r+1][c]!=0&&(grid[r+1][c]>val+1||grid[r+1][c]==1))
        {
                grid[r+1][c]=val+1;
        makeRotten(grid,r+1,c,val+1);
        }
        
        if(c+1!=grid[0].length&&grid[r][c+1]!=0&&(grid[r][c+1]>val+1||grid[r][c+1]==1))
        {
                grid[r][c+1]=val+1;
        makeRotten(grid,r,c+1,val+1);
        }
           if(r>=1&&grid[r-1][c]!=0&&(grid[r-1][c]>val+1||grid[r-1][c]==1))
           {
                      grid[r-1][c]=val+1;
                   makeRotten(grid,r-1,c,val+1);
           }
           if(c>=1&&grid[r][c-1]!=0&&(grid[r][c-1]>val+1||grid[r][c-1]==1))
           {
               
               grid[r][c-1]=val+1;
               makeRotten(grid,r,c-1,val+1);
           }
        return ;
    }
}