/*Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.

Example:

Given this linked list: 1->2->3->4->5

For k = 2, you should return: 2->1->4->3->5

For k = 3, you should return: 3->2->1->4->5*/
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        int count;
        ListNode start=head,end=head,prevend=null,newstart=null;
        ListNode prev=null,curr,newcurr;
        while(end!=null)
        {
            end=start;
            for(count=0;count<k-1;count++)
            {
                if(end!=null)
                end=end.next;
            }
            if(end!=null)
                newstart=end.next;
            if(prevend!=null&&end!=null)
                prevend.next=end;
            else if(prevend!=null)
                prevend.next=start;
            if(end!=null)
            {
                curr=start;
                while(prev!=end)
                {
                    newcurr=curr.next;
                    curr.next=prev;
                    prev=curr;
                    curr=newcurr;
                }
                if(head==start)
                    head=end;
                prevend=start;
                start=newstart;
                
                
            }
        }
        return head;
    }
}