/*A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).

The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).

Now consider if some obstacles are added to the grids. How many unique paths would there be?

*/
class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int i,j;
        int m=obstacleGrid.length;
        int n=obstacleGrid[0].length;
        for(i=m-1;i>=0;i--)
        {
            for(j=n-1;j>=0;j--)
            {
                if(obstacleGrid[i][j]==1)
                    obstacleGrid[i][j]=-1;
                if(i==m-1||j==n-1)
                {
                    if(obstacleGrid[i][j]==-1)
                        obstacleGrid[i][j]=-1;
                    else
                    {
                        if(i<m-1&&obstacleGrid[i+1][j]==-1)
                        {
                                obstacleGrid[i][j]=-1;
                        }
                         else if(j<n-1&&obstacleGrid[i][j+1]==-1)
                        {
                                obstacleGrid[i][j]=-1;
                        }
                        else
                        {
                                obstacleGrid[i][j]=1;
                        }
                    }
                }
                else
                {
                    if(obstacleGrid[i][j]==-1)
                        obstacleGrid[i][j]=-1;
                    else
                    {
                        if(obstacleGrid[i+1][j]==-1)
                        obstacleGrid[i][j]=obstacleGrid[i][j+1];
                    else if(obstacleGrid[i][j+1]==-1)
                        obstacleGrid[i][j]=obstacleGrid[i+1][j];
                    else
                        obstacleGrid[i][j]=obstacleGrid[i+1][j]+obstacleGrid[i][j+1];
                    }
                }
            }
        }
        for(i=0;i<m;i++)
        {
            System.out.println("");
            for(j=0;j<n;j++)
            {
                System.out.print(obstacleGrid[i][j]);
            }
        }
        if((n==1&&m!=1)&&obstacleGrid[1][0]==-1)
            return 0;
        if(obstacleGrid[0][0]==-1)
            return 0;
        return obstacleGrid[0][0];
    }
}