/*Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as:

a binary tree in which the left and right subtrees of every node differ in height by no more than 1.*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isBalanced(TreeNode root) {
        if(returnHeight(root)<0)
            return false;
        else
            return true;
        
    }
    public int returnHeight(TreeNode root)
    {
        if (root==null)
            return 0;
        int leftHeight=returnHeight(root.left);
        int rightHeight=returnHeight(root.right);
        if (leftHeight == -1 || rightHeight == -1)
			return -1;
 
		if (Math.abs(leftHeight - rightHeight) > 1) {
			return -1;
		}
        int bigger=Math.max(leftHeight,rightHeight);
        return bigger+1;
    }
}