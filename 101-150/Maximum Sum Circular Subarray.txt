/*Given a circular array C of integers represented by A, find the maximum possible sum of a non-empty subarray of C.

Here, a circular array means the end of the array connects to the beginning of the array.  (Formally, C[i] = A[i] when 0 <= i < A.length, and C[i+A.length] = C[i] when i >= 0.)

Also, a subarray may only include each element of the fixed buffer A at most once.  (Formally, for a subarray C[i], C[i+1], ..., C[j], there does not exist i <= k1, k2 <= j with k1 % A.length = k2 % A.length.)*/
class Solution {
    public int maxSubarraySumCircular(int[] A) {
        if(A.length==0)
            return 0;
        int max=A[0];
        int maxTillHere=A[0];
        int min=A[0];
        int minTillHere=A[0];
        int sum=A[0];
        for(int i=1;i<A.length;i++)
        {
            if(maxTillHere+A[i]>A[i])
                maxTillHere+=A[i];
            else
                maxTillHere=A[i];
            max=Math.max(max,maxTillHere);
             if(minTillHere+A[i]<A[i])
                minTillHere+=A[i];
            else
                minTillHere=A[i];
            min=Math.min(min,minTillHere);
            sum+=A[i];
        }
        if(sum==min)return max;
        return Math.max(sum-min,max);
    }
}