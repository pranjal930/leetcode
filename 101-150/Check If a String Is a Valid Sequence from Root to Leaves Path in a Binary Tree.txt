/*Given a binary tree where each path going from the root to any leaf form a valid sequence, check if a given string is a valid sequence in such binary tree. 

We get the given string from the concatenation of an array of integers arr and the concatenation of all values of the nodes along a path results in a sequence in the given binary tree.*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isValidSequence(TreeNode root, int[] arr) {
        if(root==null||arr.length==0)
            return false;
        if(root.val!=arr[0])
            return false;
        //System.out.println("traverse called");
        return traverse(root,arr,1);
        
    }
    public boolean traverse(TreeNode root,int [] arr,int i)
    {
        
        boolean left=false,right=false;
        if(root==null)
            return false;
        
        else if(root.left==null&&root.right==null&&i==arr.length)
            return true;
        else if(i==arr.length)
            return false;
        System.out.println("root is "+root.val+"looking for "+arr[i] );
        if(root.left!=null&&root.left.val==arr[i])
        {
             left=traverse(root.left,arr,i+1);
        }
        if(root.right!=null&&root.right.val==arr[i])
        {
             right=traverse(root.right,arr,i+1);
        }
        return left||right;
    }
}