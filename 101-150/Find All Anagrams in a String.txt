/*Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.

Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.

The order of output does not matter.

*/
class Solution {
    public List<Integer> findAnagrams(String s, String p) {
        int[] alpha=new int[26];
        int[] pString=new int[26];
        List<Integer> sol=new ArrayList<>();
        int k;
        for(int j=0;j<26;j++)
                pString[j]=0;
        for(int i=0;i<p.length();i++)
        {
            pString[p.charAt(i)-97]++;
        }
        for(int i=0;i<s.length();i++)
        {
            for(int j=0;j<26;j++)
                alpha[j]=0;
            for(int j=i;j<s.length();j++)
            {
                if(pString[s.charAt(j)-97]>0&&alpha[s.charAt(j)-97]<pString[s.charAt(j)-97])
                {
                    alpha[s.charAt(j)-97]++;
                }
                else
                    break;
            }
            for(k=0;k<26;k++)
            {
                if(alpha[k]!=pString[k])
                    break;
            }
            if(k==26)
                sol.add(i);
            
        }
        return sol;
    }
}