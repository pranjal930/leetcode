/*In a town, there are N people labelled from 1 to N.  There is a rumor that one of these people is secretly the town judge.

If the town judge exists, then:

The town judge trusts nobody.
Everybody (except for the town judge) trusts the town judge.
There is exactly one person that satisfies properties 1 and 2.
You are given trust, an array of pairs trust[i] = [a, b] representing that the person labelled a trusts the person labelled b.

If the town judge exists and can be identified, return the label of the town judge.  Otherwise, return -1.*/
class Solution {
    public int findJudge(int n, int[][] trust) {
        int [] trustCircle= new int[n+1];
        if(trust.length==0)
            return n;
        int max=Integer.MIN_VALUE,judge=-1;
        for(int i=0;i<n+1;i++)
            trustCircle[i]=0;
        for(int i=0;i<trust.length;i++)
        {
            if (++trustCircle[trust[i][1]]>max)
            {
                max=trustCircle[trust[i][1]];
                judge=trust[i][1];
            }
        }
        if(trustCircle[judge]==n-1)
        {
            for(int i=0;i<trust.length;i++)
            {
                if(trust[i][0]==judge)
                    return -1;
            }
            return judge;
        }
        return -1;
        
    }
}