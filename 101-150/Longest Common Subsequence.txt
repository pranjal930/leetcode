/*Given two strings text1 and text2, return the length of their longest common subsequence.

A subsequence of a string is a new string generated from the original string with some characters(can be none) deleted without changing the relative order of the remaining characters. (eg, "ace" is a subsequence of "abcde" while "aec" is not). A common subsequence of two strings is a subsequence that is common to both strings.

 

If there is no common subsequence, return 0.*/
class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        int[][] sTable=new int[text1.length()+1][text2.length()+1];
        for(int i=0;i<text1.length()+1;i++)
        {
            for(int j=0;j<text2.length()+1;j++)
            {
                if(i==0||j==0)
                    sTable[i][j]=0;
                else if(text1.charAt(i-1)==text2.charAt(j-1))
                {
                    sTable[i][j]=sTable[i-1][j-1]+1;
                }
                else
                {
                    sTable[i][j]=Math.max(sTable[i-1][j],sTable[i][j-1]);
                }
                    
            }
        }
        return sTable[text1.length()][text2.length()];
        
        
    }
}