/*Given a non-empty binary tree, find the maximum path sum.

For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain at least one node and does not need to go through the root.*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    int max=-9999;
    public int maxPathSum(TreeNode root) {
     if(root==null)
         return 0;
        traverse(root);
        return max;
        
    }
    public int traverse(TreeNode root)
    {
       if(root==null)
           return 0;
        int leftsum=Math.max(0,traverse(root.left));
        int rightsum=Math.max(0,traverse(root.right));
        max=Math.max(max,leftsum+rightsum+root.val);
            return Math.max(leftsum,rightsum)+root.val;
        
    }
}