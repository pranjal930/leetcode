/*
A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.

Return a deep copy of the list.

The Linked List is represented in the input/output as a list of n nodes. Each node is represented as a pair of [val, random_index] where:

val: an integer representing Node.val
random_index: the index of the node (range from 0 to n-1) where random pointer points to, or null if it does not point to any node.
 
*/
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/

class Solution {
    public Node copyRandomList(Node head) {
       Node newHead=head;
        Node temp;
        if(head==null)
           return null;
        while(newHead!=null)
        {
            temp=newHead.next;
            newHead.next=new Node(newHead.val);
            newHead.next.next=temp;
            newHead=temp;
        }
        newHead=head;
     /*   while(newHead!=null)
        {
            System.out.println(newHead.val);
            newHead=newHead.next;
        }*/
        while(newHead!=null)
        {
           // System.out.println(newHead.val);
            if(newHead.random!=null)
            newHead.next.random=newHead.random.next;
            newHead=newHead.next.next;
        }
        newHead=head;
        Node copy=newHead.next;
        temp=copy;
        while(newHead!=null)
        {
            //System.out.println(newHead.val);
            newHead.next=newHead.next.next;
            if(temp.next!=null)
            temp.next=temp.next.next;
            newHead=newHead.next;
            temp=temp.next;
        }
        return copy;
    }
}