/*Given two non-empty binary trees s and t, check whether tree t has exactly the same structure and node values with a subtree of s. A subtree of s is a tree consists of a node in s and all of this node's descendants. The tree s could also be considered as a subtree of itself.

*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isSubtree(TreeNode s, TreeNode t) {
      if(s==null)
          return false;
        if(t==null)
            return true;
        return traverse(s,t);
    }
    public boolean traverse(TreeNode s,TreeNode t)
    {
        if(s==null)
            return false;
        boolean isSubTree=false;
        if(s.val==t.val)
        {
            isSubTree=validate(s,t);
        }
        if(!isSubTree)
        {
           isSubTree= traverse(s.left,t) || traverse(s.right,t);
        }
            return isSubTree;
        
    }
    public boolean validate(TreeNode s,TreeNode t)
    {
        if(t==null&&s==null)
            return true;
        if((t==null||s==null)||s.val!=t.val)
            return false;
        return validate(s.left,t.left)&&validate(s.right,t.right);
    }
}