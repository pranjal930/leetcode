/*Given two lists of closed intervals, each list of intervals is pairwise disjoint and in sorted order.

Return the intersection of these two interval lists.

(Formally, a closed interval [a, b] (with a <= b) denotes the set of real numbers x with a <= x <= b.  The intersection of two closed intervals is a set of real numbers that is either empty, or can be represented as a closed interval.  For example, the intersection of [1, 3] and [2, 4] is [2, 3].)*/
class Solution {
    public int[][] intervalIntersection(int[][] A, int[][] B) {
      int i=0,j=0;
      List<int[]> ans =new ArrayList<>();
          while(i<A.length && j<B.length)
          {
              int low=Math.max(A[i][0],B[j][0]);
              int high=Math.min(A[i][1],B[j][1]);
              if(low<=high)
                  ans.add(new int[]{low,high});
              if(A[i][1]<B[j][1])
                  i++;
              else
                  j++;
          }
        return ans.toArray(new int[ans.size()][]);
    }
}