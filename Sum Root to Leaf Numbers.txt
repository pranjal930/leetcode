/*Given a binary tree containing digits from 0-9 only, each root-to-leaf path could represent a number.

An example is the root-to-leaf path 1->2->3 which represents the number 123.

Find the total sum of all root-to-leaf numbers.

Note: A leaf is a node with no children.*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public static int ans;
    public int sumNumbers(TreeNode root) {
        ans=0;
         int j;
        if (root==null)
            return 0;
        else if((root.left==null&&root.right==null))
        {
            return root.val;
        }
        else if(root.left!=null||root.right!=null)
        {
            j=pathSum(root);
            if(j==-1)
                return ans;
        }
        return ans;
        
    }
     public int pathSum(TreeNode root)
    {
        int sum=root.val;
        int i=0,j=0;
        if(root.left!=null)
        {
            root.left.val+=(sum*10);
                if(root.left.left==null&&root.left.right==null)
                {
                    ans+=root.left.val;
                    i= -1;
                }
            if(i!=-1)
            i=pathSum(root.left);
        }
         else
             i=-1;
        if(root.right!=null)
        {
            root.right.val+=(sum*10);
                if(root.right.left==null&&root.right.right==null)
                {
                    ans+=root.right.val;
                    j= -1;
                }
            if(j!=-1)
            j=pathSum(root.right);
        }
         else
             j=-1;
        if(i==-1&&j==-1)
            return -1;
         return -1;
        
    }
}