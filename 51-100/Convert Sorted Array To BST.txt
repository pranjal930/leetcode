/*Given an array where elements are sorted in ascending order, convert it to a height balanced BST.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode sortedArrayToBST(int[] nums) {
        if(nums.length==0)
            return null;
        TreeNode head=convertToTree(nums,0,nums.length-1);
        return head;
        
    }
    public TreeNode convertToTree(int[] nums,int left,int right)
    {
        if(left>right )
            return null;
        int mid=(left+right)/2;
        TreeNode temp=new TreeNode();
        temp.left=convertToTree(nums,left,mid-1);
        temp.val=nums[mid];
        temp.right=convertToTree(nums,mid+1,right);
            return temp;
    }
}