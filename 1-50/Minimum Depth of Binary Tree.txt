/*Given a binary tree, find its minimum depth.

The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.

Note: A leaf is a node with no children.

Example:*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int minDepth(TreeNode root) {
        int i;
        if(root==null)
            return 0;
        if(root.left==null&&root.right==null)
        {
            return 1;
        }
        else if(root.right==null)
            return 1+minDepth(root.left);
        else if(root.left==null)
            return 1+minDepth(root.right);
        else
            return 1+Math.min(minDepth(root.right),minDepth(root.left));
            
        
        
    }
    /*public int depth(TreeNode root)
    {
                if(root==null)
        return 0;
 
    int leftDepth = depth(root.left);
    int rightDepth = depth(root.right);
    int bigger = Math.min(leftDepth, rightDepth);
        System.out.println("depth for "+root.val+(bigger+1));
    return bigger+1;
    }*/
}