/*Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.

Note: A leaf is a node with no children.*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    List<List<Integer>> sol=new ArrayList<List<Integer>>();
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
         List<Integer> ans=new ArrayList<Integer>();
        if(root==null)
            return sol;
        addSum(root,ans,sum,0);
        return sol;
    }
    public void addSum(TreeNode root,List<Integer> ans,int sum,int cur)
    {
        if(root==null)
            return ;
        System.out.println("added"+root.val);
        ans.add(root.val);
        cur+=root.val;
        if((root.left==null&&root.right==null)&&(cur==sum))
        {
            System.out.println("in for "+root.val);
            for (Integer num : ans) { 		      
           System.out.println(num); 		
      }
            ArrayList<Integer> temp=new ArrayList<Integer>();
            temp.addAll(ans);
            sol.add(temp);
               for (Integer num1 =0;num1<sol.size();num1++) { 		      
             for (Integer num2 : ans) { 		      
           System.out.println(num2); 		
      } 		
      }
            return ;
        }
        if(root.left!=null)
        {
            
              addSum(root.left,ans,sum,cur);
            System.out.println("removed"+ans.get(ans.size()-1));
            ans.remove(ans.size()-1);
        }
        
        if(root.right!=null)
        {
            
              addSum(root.right,ans,sum,cur);
            System.out.println("removed"+ans.get(ans.size()-1));
            ans.remove(ans.size()-1);
        }
        return ;
    }
}