/*Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    List<List <Integer>> ans = new ArrayList<List<Integer>>();
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        if (root==null)
            return ans;
        printLevelOrder(root);
        return ans;
    }
    public int maxHeight(TreeNode root)
    {
        if(root==null)
            return 0;
        int leftHeight=maxHeight(root.left);
        int rightHeight=maxHeight(root.right);
        return Math.max(leftHeight,rightHeight)+1;
    }
    public void printLevelOrder(TreeNode root)
    {
        int height=maxHeight(root);
        for(int i=1;i<=height;i++)
        {
            ans.add(new ArrayList<Integer>());
        }
        giveLevelOrder(root,0,height);
    }
    public void giveLevelOrder(TreeNode root,int level,int height)
    {
        if(root==null)
            return;
        if(root.left!=null)
        {
            giveLevelOrder(root.left,level+1,height);
        }
        if(root.right!=null)
        {
            giveLevelOrder(root.right,level+1,height);
        }
            ans.get(height-1-level).add(root.val);
        
    }
}