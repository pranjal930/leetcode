/*Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    List<List<Integer>> ans=new ArrayList<List<Integer>>();
    public List<List<Integer>> levelOrder(TreeNode root) {
        if(root==null)
            return ans;
        giveLevelOrder(root);
        return ans;
    }
    public void giveLevelOrder(TreeNode root)
    {
        int height=maxHeight(root);
        for(int i=1;i<=height;i++)
        {
            ans.add(new ArrayList<Integer>());
            printLevelOrder(root,i,i);
        }
    }
    public void printLevelOrder(TreeNode root,int level,int org)
    {
        if (root==null)
            return ;
        if(level==1)
           ans.get(org-1).add(root.val);
        else if(org%2==1)
        {
            printLevelOrder(root.left,level-1,org);
            printLevelOrder(root.right,level-1,org);
        }
        else
        {
             printLevelOrder(root.right,level-1,org);
            printLevelOrder(root.left,level-1,org);
        }

    }
    public int maxHeight(TreeNode root)
    {
        if(root==null)
            return 0;
        int leftHeight=maxHeight(root.left);
        int rightHeight=maxHeight(root.right);
        return Math.max(leftHeight,rightHeight)+1;
    }
}